import express from 'express';
import TheoryQuestion from '../models/TheoryQuestion.js';
import TheoryAttempt from '../models/TheoryAttempt.js';

const router = express.Router();

// Get all theory questions
router.get('/', async (req, res) => {
  try {
    const questions = await TheoryQuestion.find()
      .populate('creator', 'username')
      .sort({ createdAt: -1 });
    res.json(questions);
  } catch (error) {
    console.error('Error fetching theory questions:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// Create a new theory question
router.post('/', async (req, res) => {
  try {
    const { question, sampleAnswer, creator } = req.body;
    
    if (!question || !sampleAnswer || !creator) {
      return res.status(400).json({ message: 'All fields are required' });
    }
    
    const newQuestion = new TheoryQuestion({
      question,
      sampleAnswer,
      creator
    });
    
    const savedQuestion = await newQuestion.save();
    const populatedQuestion = await TheoryQuestion.findById(savedQuestion._id)
      .populate('creator', 'username');
    
    res.status(201).json(populatedQuestion);
  } catch (error) {
    console.error('Error creating theory question:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// Submit an answer for evaluation
router.post('/evaluate', async (req, res) => {
  try {
    const { userId, questionId, userAnswer } = req.body;
    
    if (!userId || !questionId || !userAnswer) {
      return res.status(400).json({ message: 'All fields are required' });
    }
    
    const question = await TheoryQuestion.findById(questionId);
    if (!question) {
      return res.status(404).json({ message: 'Question not found' });
    }
    
    // Simulate AI evaluation (replace with actual AI service)
    const evaluation = {
      score: Math.floor(Math.random() * 6), // 0-5 score
      feedback: "This is simulated feedback. In production, this would be generated by an AI model analyzing the answer's accuracy, completeness, and clarity.",
      isCorrect: Math.random() > 0.5
    };
    
    const attempt = new TheoryAttempt({
      userId,
      questionId,
      userAnswer,
      score: evaluation.score,
      feedback: evaluation.feedback,
      isCorrect: evaluation.isCorrect
    });
    
    await attempt.save();
    
    res.json({
      ...evaluation,
      sampleAnswer: question.sampleAnswer
    });
  } catch (error) {
    console.error('Error evaluating answer:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// Get user's theory performance
router.get('/performance/:userId', async (req, res) => {
  try {
    const attempts = await TheoryAttempt.find({ userId: req.params.userId })
      .populate('questionId')
      .sort({ createdAt: -1 });
    
    const totalAttempts = attempts.length;
    const averageScore = totalAttempts > 0
      ? attempts.reduce((sum, att) => sum + att.score, 0) / totalAttempts
      : 0;
    
    res.json({
      attempts,
      totalAttempts,
      averageScore: Math.round(averageScore * 10) / 10
    });
  } catch (error) {
    console.error('Error fetching theory performance:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

export default router;